import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from utils.pnl_logger import read_latest_pnl
from utils.pnl_logger import analyze_trades

# === Telegram API Token ===
import json
with open("config.json") as f:
    config = json.load(f)
API_TOKEN = config.get("TELEGRAM_TOKEN", "your_token_here")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
bots = []
running_bots = []
client = None

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π ===
def set_bots(bot_list):
    global bots
    bots = bot_list

def register_running_bot(task, bot_instance):
    running_bots.append((task, bot_instance))

def set_client(external_client):
    global client
    client = external_client

# === –ö–æ–º–∞–Ω–¥—ã Telegram ===

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /pause, /resume, /status, /stop.")

@dp.message_handler(commands=["pause"])
async def pause_bot(message: types.Message):
    for bot in bots:
        bot.active = False
    await message.reply("‚è∏Ô∏è –í—Å–µ –±–æ—Ç—ã –Ω–∞ –ø–∞—É–∑–µ.")

@dp.message_handler(commands=["resume"])
async def resume_bot(message: types.Message):
    for bot in bots:
        bot.active = True
    await message.reply("‚ñ∂Ô∏è –ë–æ—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")

@dp.message_handler(commands=["stop"])
async def stop_handler(message: types.Message):
    for task, bot_instance in running_bots:
        task.cancel()
    running_bots.clear()
    await message.answer("üõë –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

@dp.message_handler(commands=["help"])
async def help_handler(message: types.Message):
    await message.answer(
        "üìñ –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å–∫\n"
        "/pause ‚Äî –ø–∞—É–∑–∞\n"
        "/resume ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n"
        "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å –∏ –±–∞–ª–∞–Ω—Å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )


@dp.message_handler(commands=["status"])
async def status_handler(message: types.Message):
    pnl = read_latest_pnl()
    await message.answer(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n<pre>{pnl}</pre>", parse_mode=ParseMode.HTML)
    
    analysis = analyze_trades()
    await message.answer(f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24—á:\n<pre>{analysis}</pre>", parse_mode=ParseMode.HTML)
    
    if client is None:
        await message.answer("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    try:
        balance = await client.get_balance()
        usdt_balance = balance.get("USDT", 0.0)
        await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance:.2f} USDT")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")